<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>其它 on __JM_Joy_Blog__</title>
    <link>https://jmjoy.github.io/categories/%E5%85%B6%E5%AE%83/</link>
    <description>Recent content in 其它 on __JM_Joy_Blog__</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 25 Feb 2017 22:32:47 +0800</lastBuildDate>
    
	<atom:link href="https://jmjoy.github.io/categories/%E5%85%B6%E5%AE%83/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux高性能服务器学习笔记</title>
      <link>https://jmjoy.github.io/post/linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 25 Feb 2017 22:32:47 +0800</pubDate>
      
      <guid>https://jmjoy.github.io/post/linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>基础部分 查看DNS cat /etc/resolv.conf nameserver开头的就是DNS服务器的IP地址 查看IP地址 host -t A www.baidu.com 查看MTU分片长度 ifcofnig 查看路由表 route 是否允许IP转</description>
    </item>
    
    <item>
      <title>入坑fish</title>
      <link>https://jmjoy.github.io/post/%E5%85%A5%E5%9D%91fish/</link>
      <pubDate>Sun, 19 Feb 2017 23:04:42 +0800</pubDate>
      
      <guid>https://jmjoy.github.io/post/%E5%85%A5%E5%9D%91fish/</guid>
      <description>最近闲聊无事，一直有听闻fish是比zsh还强劲的shell，跃跃欲试，所以今天就算个契机吧。 fish不兼容bash啊，不过也是合理的事请，</description>
    </item>
    
    <item>
      <title>Eloquent和Eavquent源码分析笔记</title>
      <link>https://jmjoy.github.io/post/eloquent%E5%92%8Ceavquent%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 27 Jan 2017 15:39:41 +0800</pubDate>
      
      <guid>https://jmjoy.github.io/post/eloquent%E5%92%8Ceavquent%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</guid>
      <description>Eloquent/Model ActiveRecord 魔术方法 __get和__set 1 2 3 4 5 6 7 8 9 10 public function __get($key) { return $this-&amp;gt;getAttribute($key); } public function __set($key, $value) { $this-&amp;gt;setAttribute($key, $value); } 魔术方法 __call和__callStatic，查询器 1</description>
    </item>
    
    <item>
      <title>firefox开发版</title>
      <link>https://jmjoy.github.io/post/firefox%E5%BC%80%E5%8F%91%E7%89%88/</link>
      <pubDate>Tue, 10 Jan 2017 00:35:10 +0800</pubDate>
      
      <guid>https://jmjoy.github.io/post/firefox%E5%BC%80%E5%8F%91%E7%89%88/</guid>
      <description>今晚和同事闲聊的时候才知道有Firefox develop editon这回事！Firefox 也是隐藏地很深啊，一直都觉得firefox的手机调试非常烂，但</description>
    </item>
    
    <item>
      <title>多继承完美闪避成员名冲突的问题</title>
      <link>https://jmjoy.github.io/post/%E5%A4%9A%E7%BB%A7%E6%89%BF%E5%AE%8C%E7%BE%8E%E9%97%AA%E9%81%BF%E6%88%90%E5%91%98%E5%90%8D%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 10 Jun 2016 01:15:00 +0800</pubDate>
      
      <guid>https://jmjoy.github.io/post/%E5%A4%9A%E7%BB%A7%E6%89%BF%E5%AE%8C%E7%BE%8E%E9%97%AA%E9%81%BF%E6%88%90%E5%91%98%E5%90%8D%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class A { fn t() { &amp;#34;A::t&amp;#34; } } class B { fn t() {</description>
    </item>
    
    <item>
      <title>Rust的多继承和mixin机制</title>
      <link>https://jmjoy.github.io/post/rust%E7%9A%84%E5%A4%9A%E7%BB%A7%E6%89%BF%E5%92%8Cmixin%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 23 May 2016 19:22:03 +0800</pubDate>
      
      <guid>https://jmjoy.github.io/post/rust%E7%9A%84%E5%A4%9A%E7%BB%A7%E6%89%BF%E5%92%8Cmixin%E6%9C%BA%E5%88%B6/</guid>
      <description>先上一段Rust代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 traitA{fn say(self);}traitB{fn say(self);}struct S;implAforS{fn say(self){println!(&amp;#34;S say: A&amp;#34;);}}implBforS{fn say(self){println!(&amp;#34;S say: B&amp;#34;);}}fn say_a&amp;lt;T: A&amp;gt;(t: T){t.say();}fn say_b&amp;lt;T: B&amp;gt;(t: T){t.say();}fn main(){say_a(S);say_b(S);} 给java和p</description>
    </item>
    
  </channel>
</rss>